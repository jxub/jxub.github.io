<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jakub Janarek</title>
    <link>https://jakubjanarek.com/</link>
    <description>Recent content on Jakub Janarek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2017 Jakub Janarek</copyright>
    <lastBuildDate>Mon, 28 Aug 2017 17:49:07 +0200</lastBuildDate>
    
	<atom:link href="https://jakubjanarek.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://jakubjanarek.com/about/</link>
      <pubDate>Mon, 28 Aug 2017 17:49:07 +0200</pubDate>
      
      <guid>https://jakubjanarek.com/about/</guid>
      <description>Hi, nice to meet you! I build software with Python, Go, and JavaScript. Ocassionally I like to give talks or attend hackathons. Currently I work at Datamaran and Finametrix. To get a grip on the fundamentals of CS, I am also studying it at UPV in València, Spain.
Have a look at my CV, let&amp;rsquo;s get in touch!</description>
    </item>
    
    <item>
      <title>Messaging Queues Overview</title>
      <link>https://jakubjanarek.com/posts/messaging-queues-overview/</link>
      <pubDate>Sun, 02 Jul 2017 13:12:07 +0200</pubDate>
      
      <guid>https://jakubjanarek.com/posts/messaging-queues-overview/</guid>
      <description>I wrote piece this while researching how does Kafka work, as we are using it at Datamaran for our messaging system. Hope you&amp;rsquo;ll find this long slog a productive and enjoyable read ;)
Messaging queues allow applications to communicate y sending and reading messages between them. Every messaging queue implements an asynchronous protocol, that is a system that does not require for the message to be responded to immediately (think of, HTTP for example).</description>
    </item>
    
    <item>
      <title>Mad Scientist: Make your own Types for IO in Python</title>
      <link>https://jakubjanarek.com/posts/types-for-io-python/</link>
      <pubDate>Sun, 04 Jun 2017 21:24:52 +0200</pubDate>
      
      <guid>https://jakubjanarek.com/posts/types-for-io-python/</guid>
      <description>You can use custom type classes to represent semantically a return type. That means that they aren’t enforced by the type checker, as they subclass the NoneType, but they may help you in modelling the program interactions with the world in your head. In fact, they make your head work better as a “type checker” with the outside, sort of the way that Monads do in Haskell. We start by importing our types and the NewType class from the typing module, and we go from there.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jakubjanarek.com/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jakubjanarek.com/license/</guid>
      <description>Attribution-ShareAlike 4.0 International
=======================================================================
Creative Commons Corporation (&amp;ldquo;Creative Commons&amp;rdquo;) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an &amp;ldquo;as-is&amp;rdquo; basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</description>
    </item>
    
  </channel>
</rss>